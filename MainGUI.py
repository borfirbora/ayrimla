
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.5 on Thu Jun 29 15:27:56 2023
#

import wx
import os, sys
from accessible_output2.outputs.auto import Auto
screen_reader = Auto()
from gtts import gTTS
from pydub import AudioSegment
from pydub.playback import play
from pydub.silence import split_on_silence
from threading import Thread

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
def split(self,v1,v2,v3,v4,v5, v6):
	dlg = wx.MessageDialog(self,f"{v6}.mp3 dosyanız, {v5} dizinine dışa aktarılacak. İşlemler esnasındaki tüm adımlar, ekran okuyucunuza otomatik olarak yönlendirilecek.\n\nEkran okuyucunuzun durum çubuğu okuma komutunu kullanarak da bu bilgileri edinebilirsiniz.","İşlem Başlıyor!")
	dlg.SetOKLabel("&Tamam")
	dlg.ShowModal()

	silent = AudioSegment.silent(500)
# Ses dosyasını yükle
	ses_dosyasi = AudioSegment.from_file(v1, format="mp3")

# Sessizliklere göre bölme işlemi
	self.status.SetStatusText(u"" + v6 + " Dosyasının sessizliklerine ayrılma işlemi başladı...",0)
	screen_reader.speak("" + v6 + ".mp3 Dosyasının sessizliklerine ayrılma işlemi başladı...")
	bolumler = split_on_silence(ses_dosyasi, min_silence_len=v3, silence_thresh=-50)
	self.status.SetStatusText(u"Bölünme işlemi bitti, parçalar oluşturuluyor...",0)
	screen_reader.speak("Bölünme işlemi bitti, parçalar oluşturuluyor...")

# Her bir bölümü 10 dakikalık parçalar halinde birleştir
	birlesik_dosya = AudioSegment.empty()
	birlesik_dosya_suresi = 0
	parca_no = 1

	for bolum in bolumler:
		bolum_suresi = len(bolum)
	
	# Eğer birleştirilmiş dosyanın süresi 10 dakikayı geçtiyse, yeni bir dosya oluştur
		if birlesik_dosya_suresi + bolum_suresi > v2 * 60 * 1000:
			if v4 == 1:
				ayrim_basligi = AudioSegment.from_file(f"sounds\\a{parca_no}.mp3",format="mp3")
				birlesik_dosya = ayrim_basligi + silent + birlesik_dosya
				birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
				birlesik_dosya = AudioSegment.empty()
				birlesik_dosya_suresi = 0
				self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)
				screen_reader.speak("" + str(parca_no) + ". parça oluşturuldu...")
				parca_no += 1
			elif v4 == 2:
				ayrim_basligi = AudioSegment.from_file(f"sounds\\{parca_no}a.mp3",format="mp3")
				birlesik_dosya = ayrim_basligi + silent + birlesik_dosya
				birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
				birlesik_dosya = AudioSegment.empty()
				birlesik_dosya_suresi = 0
				self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)
				screen_reader.speak("" + str(parca_no) + ". parça oluşturuldu...")
				parca_no += 1
			else:
				birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
				birlesik_dosya = AudioSegment.empty()
				birlesik_dosya_suresi = 0
				self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)
				screen_reader.speak("" + str(parca_no) + ". parça oluşturuldu...")
				parca_no += 1

		birlesik_dosya += bolum
		birlesik_dosya_suresi += bolum_suresi

# Son parçaları birleştirilmiş dosyaya ekle
	if v4 == 1:
		ayrim_basligi = AudioSegment.from_file(f"sounds\\a{parca_no}.mp3",format="mp3")
		birlesik_dosya = ayrim_basligi + silent + birlesik_dosya
		birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
		self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)
	elif v4 == 2:
		ayrim_basligi = AudioSegment.from_file(f"sounds\\{parca_no}a.mp3",format="mp3")
		birlesik_dosya = ayrim_basligi + silent + birlesik_dosya
		birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
		self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)
	else:
		birlesik_dosya.export(str(v5) + "\\{:0>3}_".format(str(parca_no)) + str(v6) + ".mp3", format="mp3")
		self.status.SetStatusText(u"" + str(parca_no) + ". parça oluşturuldu...",0)

	dlg = wx.MessageDialog(self,f"{v6}.mp3 dosyanız, {v5} dizinine başarılı bir şekilde, {parca_no} ayrım olacak şekilde dışa aktarıldı.\n\nKlasör açılıyor.","Başarılı!")
	dlg.SetOKLabel("&Tamam")
	dlg.ShowModal()
	os.startfile(v5)
# end wxGlade


class MainGUI(wx.Frame):
	def __init__(self, *args, **kwds):
		# begin wxGlade: MainGUI.__init__
		kwds["style"] = kwds.get("style", 0) | wx.CAPTION | wx.CLIP_CHILDREN | wx.CLOSE_BOX | wx.MAXIMIZE | wx.MAXIMIZE_BOX | wx.MINIMIZE_BOX | wx.RESIZE_BORDER
		wx.Frame.__init__(self, *args, **kwds)
		self.SetSize((800, 600))
		self.SetTitle(u"Ayrımla 1.0")

		self.menu = wx.Menu()
		self.bol = self.menu.Append(wx.ID_ANY,"Ayrımlara Böl","Yaptığınız ayarlara göre dosya bölme işlemine başlar.")
		self.yardim = self.menu.Append(wx.ID_ANY,"&Yardım","Yardımı görüntüler.")
		self.iptal = self.menu.Append(wx.ID_ANY,"&Hakkında","Program hakkında iletişim kutusunu görüntüler")

		self.Bind(wx.EVT_MENU,self.onBol,self.bol)
		self.Bind(wx.EVT_MENU,self.onIptal,self.iptal)
		self.Bind(wx.EVT_MENU,self.onYardim,self.yardim)
		self.Bind(wx.EVT_HELP,self.onYardim)
		self.status = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE)
		self.status.SetStatusWidths([600])
		# statusbar fields
		status_fields = [u"Dosya Seçilmedi. Seçmek için `Aç...` düğmesini kullanın."]
		for i in range(len(status_fields)):
			self.status.SetStatusText(status_fields[i], i)

		self.tabs = wx.Notebook(self, wx.ID_ANY)

		self.kaynak_dosya = wx.Panel(self.tabs, wx.ID_ANY)
		self.tabs.AddPage(self.kaynak_dosya, "Kaynak Dosya")

		kaynak_dosya_sizer = wx.BoxSizer(wx.VERTICAL)

		kaynak_dosya_label = wx.StaticText(self.kaynak_dosya, wx.ID_ANY, "Kaynak Dosya")
		kaynak_dosya_sizer.Add(kaynak_dosya_label, 1, 0, 0)

		self.kaynak_dosya_text = wx.TextCtrl(self.kaynak_dosya, wx.ID_ANY, u"Dosya seçmek için `Göz At...` butonunu kullanın...")
		kaynak_dosya_sizer.Add(self.kaynak_dosya_text, 1, 0, 0)

		self.kaynak_dosya_goz_at = wx.Button(self.kaynak_dosya, wx.ID_ANY, u"&Göz At...")
		kaynak_dosya_sizer.Add(self.kaynak_dosya_goz_at, 1, 0, 0)

		self.ayrim_suresi = wx.Panel(self.tabs, wx.ID_ANY)
		self.tabs.AddPage(self.ayrim_suresi, u"Ayrım Süresi")

		ayrim_suresi_sizer = wx.BoxSizer(wx.VERTICAL)

		ayrim_suresi_label = wx.StaticText(self.ayrim_suresi, wx.ID_ANY, u"Bir ayrımdaki maximum dakika sayısı (en fazla 25):")
		ayrim_suresi_sizer.Add(ayrim_suresi_label, 1, 0, 0)

		self.ayrim_suresi_dakika = wx.SpinCtrl(self.ayrim_suresi, wx.ID_ANY, "1", min=1, max=25)
		ayrim_suresi_sizer.Add(self.ayrim_suresi_dakika, 1, 0, 0)

		self.sessizlik_suresi = wx.Panel(self.tabs, wx.ID_ANY)
		self.tabs.AddPage(self.sessizlik_suresi, u"Sessizlik Süresi")

		sessizlik_suresi_sizer = wx.BoxSizer(wx.VERTICAL)

		sessizlik_suresi_label = wx.StaticText(self.sessizlik_suresi, wx.ID_ANY, u"Bölünecek yer olarak kabul edilmesini istediğiniz en düşük süreyi milisaniye cinsinden girin (minimum 500, maximum 8000):")
		sessizlik_suresi_sizer.Add(sessizlik_suresi_label, 1, 0, 0)

		self.sessizlik_suresi_milisaniye = wx.SpinCtrl(self.sessizlik_suresi, wx.ID_ANY, "500", min=500, max=8000)
		sessizlik_suresi_sizer.Add(self.sessizlik_suresi_milisaniye, 1, 0, 0)

		self.ayrim_basligi = wx.Panel(self.tabs, wx.ID_ANY)
		self.tabs.AddPage(self.ayrim_basligi, u"Ayrım Başlığı")

		ayrim_basligi_sizer = wx.BoxSizer(wx.VERTICAL)

		self.ayrim_basligi_onay = wx.RadioBox(self.ayrim_basligi, wx.ID_ANY, u"Ayrım Başlığı", choices=["Ekleme", "Ekle"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
		self.ayrim_basligi_onay.SetSelection(0)
		ayrim_basligi_sizer.Add(self.ayrim_basligi_onay, 1, 0, 0)

		self.ayrim_basligi_turu = wx.RadioBox(self.ayrim_basligi, wx.ID_ANY, u"Ayrım başlıkları nasıl telaffuz edilsin?", choices=[u"Ayrım, 1; Ayrım, 2; Ayrım, x", u"1. Ayrım; 2. Ayrım; x. Ayrım"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
		self.ayrim_basligi_turu.Enable(False)
		self.ayrim_basligi_turu.SetSelection(0)
		ayrim_basligi_sizer.Add(self.ayrim_basligi_turu, 1, 0, 0)

		self.cikti_klasoru = wx.Panel(self.tabs, wx.ID_ANY)
		self.tabs.AddPage(self.cikti_klasoru, u"Çıktı Klasörü")

		cikti_klasoru_sizer = wx.BoxSizer(wx.VERTICAL)

		cikti_klasoru_label = wx.StaticText(self.cikti_klasoru, wx.ID_ANY, u"Çıktı Klasörü")
		cikti_klasoru_sizer.Add(cikti_klasoru_label, 1, 0, 0)

		self.cikti_klasoru_text = wx.TextCtrl(self.cikti_klasoru, wx.ID_ANY, u"Ayrımların Yerleştirileceği klasörü seçmek için `Göz At...` düğmesini kullanın.")
		cikti_klasoru_sizer.Add(self.cikti_klasoru_text, 1, 0, 0)

		self.cikti_klasoru_goz_at = wx.Button(self.cikti_klasoru, wx.ID_ANY, u"&Göz At...")
		cikti_klasoru_sizer.Add(self.cikti_klasoru_goz_at, 1, 0, 0)

		self.cikti_klasoru.SetSizer(cikti_klasoru_sizer)

		self.ayrimla_btn = wx.Button(self.cikti_klasoru, wx.ID_ANY, u"&İşlem Menüsü")
		cikti_klasoru_sizer.Add(self.ayrimla_btn, 1, 0, 0)
		self.ayrimla_btn.Enable(False)

		self.ayrim_basligi.SetSizer(ayrim_basligi_sizer)

		self.sessizlik_suresi.SetSizer(sessizlik_suresi_sizer)

		self.ayrim_suresi.SetSizer(ayrim_suresi_sizer)

		self.kaynak_dosya.SetSizer(kaynak_dosya_sizer)

		self.Layout()

		self.Bind(wx.EVT_BUTTON, self.onGozAt, self.kaynak_dosya_goz_at)
		self.Bind(wx.EVT_SPINCTRL, self.onDakikaChanged, self.ayrim_suresi_dakika)
		self.Bind(wx.EVT_SPINCTRL, self.onMilisaniyeChanged, self.sessizlik_suresi_milisaniye)
		self.Bind(wx.EVT_RADIOBOX, self.onAyrimBasligiSelection, self.ayrim_basligi_onay)
		self.Bind(wx.EVT_BUTTON, self.onCiktiKlasoruGozat, self.cikti_klasoru_goz_at)
		self.Bind(wx.EVT_BUTTON, self.onMenu, self.ayrimla_btn)
		self.Bind(wx.EVT_CLOSE, self.onWindowClose, self)
		self.v1 = ""
		self.v2 = ""
		self.v3 = ""
		self.v4 = 0
		self.v5 = ""
		self.v6 = ""
		# end wxGlade

	def onGozAt(self, event):  # wxGlade: MainGUI.<event_handler>
		dlg = wx.FileDialog(self,"MP3 Dosyası Seç",wx.GetHomeDir(),"","MP3 Dosyaları (*.mp3)|*.mp3",wx.FD_OPEN)
		if dlg.ShowModal() == wx.ID_OK:
			file = dlg.GetPath()
			self.kaynak_dosya_text.SetValue(file)
			self.v1 = file
			self.v6 = dlg.GetFilename()[:-4]
			self.status.SetStatusText(u"{}.mp3 dosyası seçildi...".format(self.v6),0)
			a = AudioSegment.from_file("sounds\\kaynak_dosya.mp3",format="mp3")
			Thread(target=play,args=(a,)).start()
		event.Skip()

	def onDakikaChanged(self, event):  # wxGlade: MainGUI.<event_handler>
		self.v2 = event.GetEventObject().GetValue()
		self.status.SetStatusText(u"Ayrım süresi " + str(self.v2) + " dakika olarak ayarlandı...",0)
		event.Skip()
	def onMilisaniyeChanged(self, event):  # wxGlade: MainGUI.<event_handler>
		self.v3 = event.GetEventObject().GetValue()
		self.status.SetStatusText(u"Sessizlik süresi " + str(self.v3) + " milisaniye olarak ayarlandı...",0)
		event.Skip()


	def onAyrimBasligiSelection(self, event):  # wxGlade: MainGUI.<event_handler>
		e = event.GetSelection()
		if e == 1:
			self.ayrim_basligi_turu.Enable(True)
			self.Bind(wx.EVT_RADIOBOX, self.onAyrimBasligiTuruSelection, self.ayrim_basligi_turu)
			self.v4 = self.ayrim_basligi_turu.GetSelection() + 1
			self.status.SetStatusText(u"Ayrım, x şeklinde olacak...",0)
		else:
			self.ayrim_basligi_turu.Enable(False)
			self.Unbind(wx.EVT_RADIOBOX,self.ayrim_basligi_turu)
			self.v4 = 0
			self.status.SetStatusText(u"Başlık kullanılmayacak...",0)
		event.Skip()

	def onAyrimBasligiTuruSelection(self, event):
		baslik = event.GetEventObject()
		i = baslik.GetSelection()
		if i == 0:
			self.v4 = 1
			self.status.SetStatusText(u"Ayrım, x şeklinde olacak...",0)
		else:
			self.v4 = 2
			self.status.SetStatusText(u"X. ayrım şeklinde olacak...",0)
		event.Skip()

	def onWindowClose(self, event):  # wxGlade: MainGUI.<event_handler>
		a = [self.v1,self.v2,self.v3,self.v4,self.v5,self.v6]
		for b, c in enumerate(a,1):
			print(f"v{b}: {c}")
		event.Skip()

	def onCiktiKlasoruGozat(self, event):  # wxGlade: MainGUI.<event_handler>
		dlg = wx.DirDialog(self,"Kaydedilecek Klasörü Seçin",".",wx.DD_DEFAULT_STYLE|wx.DD_DIR_MUST_EXIST)
		if dlg.ShowModal() == wx.ID_OK:
			file = dlg.GetPath()
			self.cikti_klasoru_text.SetValue(file)
			self.v5 = file
			self.ayrimla_btn.Enable(True)
			self.status.SetStatusText(u"Çıktı Klasörü Ayarlandı...",0)
			b = AudioSegment.from_file("sounds\\kaynak_dosya.mp3", format="mp3")
			Thread(target=play, args=(b,)).start()
		event.Skip()

	def onMenu(self,event):
		if self.v1 == "" or self.v2 == "" or self.v3 == "" or self.v5 == "":
			self.bol.Enable(False)
		else:
			self.bol.Enable(True)
		self.PopupMenu(self.menu)

	def onBol(self, event):
		bl = Thread(target=split, args=(self,self.v1,self.v2,self.v3,self.v4,self.v5,self.v6))
		bl.start()
		

	def onIptal(self, event):
		dlg = wx.MessageDialog(self,"Bu program, Bora Fırlangeç tarafından geliştirilmiştir.\n\nProgram hakkındaki görüş, öneri ve taleplerinizi borafirlangec@gmail.com adresine yazabilirsiniz.","Hakkında")
		dlg.SetOKLabel("&Tamam")
		dlg.ShowModal()
		event.Skip()

	def onYardim(self, event):
		os.startfile("yardim.html")
# end of class MainGUI
